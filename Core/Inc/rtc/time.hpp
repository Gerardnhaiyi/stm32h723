/***********************************************************************************************************************************
 *  File name          : time.hpp
 *  Author             : GGT Nesselaar
 *
 *  Compiler           : STM32CubeIDE
 *  Manufacturer       : STMicroelectronics
 *  CreationDate       : Nov 29, 2023
 *
 **********************************************************************************************************************************/
#ifndef INC_RTC_TIME_HPP_

/***********************************************************************************************************************************
 *  Used defines       : 
 **********************************************************************************************************************************/
    #define	INC_RTC_TIME_HPP_

/***********************************************************************************************************************************
 *  Used includes      :
 **********************************************************************************************************************************/
#include <cstdint>
#include <cstring>
#include <cmath>

/***********************************************************************************************************************************
 *  Used constants    :
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *	enum name          : 
 *
 *  enum Description   : 
 *
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *	array name         :
 *
 *  array Description  :
 *
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *	struct name        :
 *
 *	struct Description :
 *
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *	Class name         : time
 *
 *  Class Description  : Simple time storage class
 *
 *	Inheritance        : None
 *
 **********************************************************************************************************************************/
class time 
{
    public:
        uint8_t hours = 0;
        uint8_t minutes = 0;
        uint8_t seconds = 0;
        uint16_t milliseconds = 0;

        /***********************************************************************************************************************************
         *  Method Name        : time
         *
         *  Method Description : Construct a new empty Time object.
         *
         *  Entry              : None
         *
         *  Exit               : None
         *
         **********************************************************************************************************************************/
        time() {};

        /***********************************************************************************************************************************
         *  Method Name        : time
         *
         *  Method Description : Construct a new Time object
         *
         *  Entry              : hours, Hours given in 24h format, between 0-24.
         *                       minutes, Minutes given between 0-59
         *                       seconds, Seconds given between 0-59
         *                       milliseconds, Miliseconds given between 0-999.
         *
         *  Exit               : None
         *
         **********************************************************************************************************************************/
        time(const uint8_t &hours, const uint8_t &minutes, const uint8_t &seconds, const uint16_t &milliseconds) :
                        hours(hours), minutes(minutes), seconds(seconds), milliseconds(milliseconds) {}

        int timeToString(char *buffer, const size_t &bufferSize); //Convert Time object to string.
        float timeToSeconds(); //Calculate time in seconds from 00:00:00.000 as starting point.\n

        /***********************************************************************************************************************************
         *  Method Name        : operator ==
         *
         *  Method Description : Overloaded operator for equals
         *
         *  Entry              : rhs, other object
         *
         *  Exit               : true, if hours,minutes,seconds and miliseconds are the same.
         *  					 false, if hours or minutes or miliseconds differs.
         *
         **********************************************************************************************************************************/
        bool operator == (const time &rhs)
        const   {
                    return (hours == rhs.hours) && (minutes == rhs.minutes) && (seconds == rhs.seconds) && (milliseconds == rhs.milliseconds);
                }

        /***********************************************************************************************************************************
         *  Method Name        : operator >
         *
         *  Method Description : Overloaded operator for greater then.
         *
         *  Entry              : rhs, other object
         *
         *  Exit               : true, LHS is later then RHS
         *  					 false, RHS is later then LHS
         *
         **********************************************************************************************************************************/
        bool operator > (const time &rhs)
        const   {
                    return (hours > rhs.hours) ? true : (hours == rhs.hours && minutes > rhs.minutes) ? true :
                           (minutes == rhs.minutes && seconds > rhs.seconds) ? true : (seconds == rhs.seconds && milliseconds > rhs.milliseconds);
                }

};

/***********************************************************************************************************************************
 *  Prototypes         :
 **********************************************************************************************************************************/


    
#endif	/* INC_RTC_TIME_HPP_ */

